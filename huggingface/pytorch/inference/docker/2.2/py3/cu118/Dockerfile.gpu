FROM nvidia/cuda:11.8.0-base-ubuntu20.04 AS base_image

LABEL maintainer="Amazon AI"
LABEL dlc_major_version="1"

# Specify accept-bind-to-port LABEL for inference pipelines to use SAGEMAKER_BIND_TO_PORT
# https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-real-time.html
LABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true

ARG MMS_VERSION=1.1.11
ARG PYTHON=python3
ARG PYTHON_VERSION=3.10.13
ARG MINIFORGE3_VERSION=23.11.0-0
ARG OPEN_MPI_VERSION=4.1.5

# Nvidia software versions
ARG CUBLAS_VERSION=11.11.3.6
ARG CUDNN_VERSION=8.8.0.121
ARG NCCL_VERSION=2.19.3
ARG NVML_VERSION=11.8.86

# PyTorch Binaries and versions.
ARG TORCH_URL=https://framework-binaries.s3.us-west-2.amazonaws.com/pytorch/v2.2.0/cuda11.8.0/torch-2.2.0%2Bcu118-cp310-cp310-linux_x86_64.whl

# HF ARGS
ARG TRANSFORMERS_VERSION
ARG PEFT_VERSION=0.11.1
ARG ACCELERATE_VERSION=0.31.0
ARG XFORMERS_VERSION=0.0.26.post1
ARG BITS_ANDBYTES_VERSION=0.43.1
ARG TRL_VERSION=0.9.4

# This arg required to stop docker build waiting for region configuration while installing tz data from ubuntu 20
ENV DEBIAN_FRONTEND=noninteractive

# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules
# Force stdin, stdout and stderr to be totally unbuffered. Good for logging
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV LD_LIBRARY_PATH="/usr/local/lib:${LD_LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="/opt/conda/lib:${LD_LIBRARY_PATH}"
ENV PYTHONIOENCODING=UTF-8
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PATH=/opt/conda/bin:$PATH

# Set Env Variables for the images
ENV TEMP=/home/model-server/tmp
ENV MKL_THREADING_LAYER=GNU

# Cuda Arch List setting Options
ENV TORCH_CUDA_ARCH_LIST="3.7 5.0 7.0+PTX 7.5+PTX 8.0 9.0"

ENV DLC_CONTAINER_TYPE=inference

RUN apt-get update \
 && apt-get -y upgrade \
 && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \
    libc6 \
    software-properties-common \
    build-essential \
    ca-certificates \
    cmake \
    libcurl4-openssl-dev \
    cuda-cudart-11-8 \
    cuda-libraries-11-8 \
    cuda-libraries-dev-11-8 \
    cuda-command-line-tools-11-8 \
    cuda-nvcc-11-8 \
    libcublas-11-8=${CUBLAS_VERSION}-1 \
    libcublas-dev-11-8=${CUBLAS_VERSION}-1 \
    cuda-nvml-dev-11-8=${NVML_VERSION}-1 \
    libcudnn8=${CUDNN_VERSION}-1+cuda11.8 \
    curl \
    emacs \
    git \
    jq \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libgomp1 \
    libibverbs-dev \
    libnuma1 \
    libnuma-dev \
    libsm6 \
    libssl1.1 \
    libssl-dev \
    libxext6 \
    libxrender-dev \
    openjdk-17-jdk \
    openssl \
    vim \
    wget \
    unzip \
    libjpeg-dev \
    libpng-dev \
    zlib1g-dev \
    libsndfile1-dev \
    ffmpeg \
    openssh-client \
    openssh-server \
    python3-dev \
 && apt-get autoremove -y \
 && rm -rf /var/lib/apt/lists/* \
 && apt-get clean

# makes AllToAll complete successfully. Update will be included in NCCL 2.20.*
ENV NCCL_CUMEM_ENABLE=0
# Install NCCL
RUN cd /tmp \
 && git clone https://github.com/NVIDIA/nccl.git -b v${NCCL_VERSION}-1 \
 && cd nccl \
 # fix for AllReduce regression. https://github.com/NVIDIA/nccl/pull/1112
 && curl https://github.com/liralon/nccl/commit/505aa4b048c3824060332fe3652605e1b33108c8.patch | git apply --reject \
 && make -j64 src.build BUILDDIR=/usr/local \
 && rm -rf /tmp/nccl
# preload to system nccl for PyTorch to use its statically linked NCCL
ENV LD_PRELOAD="/usr/local/lib/libnccl.so"

# Install OpenMPI
RUN wget --quiet https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OPEN_MPI_VERSION}.tar.gz \
 && gunzip -c openmpi-${OPEN_MPI_VERSION}.tar.gz | tar xf - \
 && cd openmpi-${OPEN_MPI_VERSION} \
 && ./configure --prefix=/home/.openmpi --with-cuda \
 && make all install \
 && cd .. \
 && rm openmpi-${OPEN_MPI_VERSION}.tar.gz \
 && rm -rf openmpi-${OPEN_MPI_VERSION}

# The ENV variables declared below are changed in the previous section
# Grouping these ENV variables in the first section causes
# ompi_info to fail. This is only observed in CPU containers
ENV PATH="$PATH:/home/.openmpi/bin"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/home/.openmpi/lib/"
RUN ompi_info --parsable --all | grep mpi_built_with_cuda_support:value

# Install CondaForge miniconda
RUN curl -L -o ~/miniforge3.sh https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE3_VERSION}/Miniforge3-${MINIFORGE3_VERSION}-Linux-x86_64.sh \
 && chmod +x ~/miniforge3.sh \
 && ~/miniforge3.sh -b -p /opt/conda \
 && rm ~/miniforge3.sh

# Install common conda packages
RUN /opt/conda/bin/conda install -y -c conda-forge \
    python=${PYTHON_VERSION} \
    cython \
    # PyTorch is built with older version of mkl whose symbol "iJIT_NotifyEvent" was removed in v2024.1
    "mkl>=2023.2.0,<= 2024.0" \
    mkl-include \
    parso \
    scipy \
    numpy \
    pandas \
    pyarrow \
    typing \
    h5py \
    requests \
    libgcc \
    cmake \
    packaging \
    "awscli<2" \
    boto3 \
    pyyaml \
    packaging \
    conda-content-trust \
    charset-normalizer \
 && /opt/conda/bin/conda clean -afy \
 && rm -rf /etc/apt/sources.list.d/*

# symlink pip for OS use
RUN pip install --upgrade pip --no-cache-dir --trusted-host pypi.org --trusted-host files.pythonhosted.org \
 && ln -s /opt/conda/bin/pip /usr/local/bin/pip3

# Install Common python packages
RUN pip install --no-cache-dir -U \
    opencv-python \
    # "nvgpu" is a dependency of TS but is disabled in SM DLC build,
    # via ENV Variable "TS_DISABLE_SYSTEM_METRICS=true" in the SM section of this file.
    # due to incompatibility with SM hosts
    nvgpu \
    "pyopenssl>=24.0.0" \
    enum-compat==0.0.3 \
    captum \
    "Pillow>=9.0.0" \
    "cryptography>=42.0.5" \
    "ipython>=8.10.0,<9.0" \
    "awscli<2" \
    "urllib3>=1.26.18,<2"

WORKDIR /root

# Ensure PyTorch did not get installed from Conda due to magma-cuda117
RUN pip uninstall -y torch torchvision torchaudio model-archiver multi-model-server

# Install AWS-PyTorch, and other torch packages
RUN pip install --no-cache-dir -U \
    # triton required for torch inductor
    triton==2.2.0 \
    ${TORCH_URL}

# add necessary certificate for aws sdk cpp download
RUN mkdir -p /etc/pki/tls/certs && cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt

WORKDIR /

# Install MMS
RUN pip install --no-cache-dir \
    multi-model-server==$MMS_VERSION \
    sagemaker-inference

RUN cd tmp/ \
 && rm -rf tmp*

# create user and folders
RUN useradd -m model-server \
 && mkdir -p /home/model-server/tmp /opt/ml/model \
 && chown -R model-server /home/model-server /opt/ml/model

# add MMS entrypoint
COPY mms-entrypoint.py /usr/local/bin/dockerd-entrypoint.py
COPY config.properties /etc/sagemaker-mms.properties
RUN chmod +x /usr/local/bin/dockerd-entrypoint.py

# add telemetry
COPY deep_learning_container.py /usr/local/bin/deep_learning_container.py
RUN chmod +x /usr/local/bin/deep_learning_container.py

#################################
# Hugging Face specific section #
#################################

RUN curl -o /license.txt  https://aws-dlc-licenses.s3.amazonaws.com/pytorch-2.0/license.txt

RUN pip install torch==2.3.0 --index-url https://download.pytorch.org/whl/cu121
RUN pip uninstall -y transformer-engine
RUN pip install --no-cache-dir \
	transformers[sklearn,sentencepiece]==${TRANSFORMERS_VERSION}

# install Hugging Face libraries and its dependencies
RUN pip install --no-cache-dir \
    peft==${PEFT_VERSION} \
    accelerate==${ACCELERATE_VERSION} \
    trl==${TRL_VERSION} \
    bitsandbytes==${BITS_ANDBYTES_VERSION} \
    xformers==${XFORMERS_VERSION} \
    "protobuf>=3.19.5,<=3.20.2" \
    "numpy>=1.22.2,<1.23" \
    "sagemaker-huggingface-inference-toolkit==2.3"

RUN pip install "unsloth @ git+https://github.com/unslothai/unsloth.git"

# RUN HOME_DIR=/root \
#  && curl -o ${HOME_DIR}/oss_compliance.zip https://aws-dlinfra-utilities.s3.amazonaws.com/oss_compliance.zip \
#  && unzip ${HOME_DIR}/oss_compliance.zip -d ${HOME_DIR}/ \
#  && cp ${HOME_DIR}/oss_compliance/test/testOSSCompliance /usr/local/bin/testOSSCompliance \
#  && chmod +x /usr/local/bin/testOSSCompliance \
#  && chmod +x ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh \
#  && ${HOME_DIR}/oss_compliance/generate_oss_compliance.sh ${HOME_DIR} ${PYTHON} \
#  && rm -rf ${HOME_DIR}/oss_compliance*

## Cleanup ##
RUN pip cache purge \
 && rm -rf /tmp/tmp* \
 && rm -iRf /root/.cache

EXPOSE 8080 8081
ENTRYPOINT ["python", "/usr/local/bin/dockerd-entrypoint.py"]
CMD ["serve"]
